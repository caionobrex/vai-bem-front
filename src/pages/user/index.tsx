import { AxiosResponse } from 'axios'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import Input from '../../components/input'
import api from '../../services/api'
import * as yup from 'yup'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import { MdEmail, MdOutlineFileCopy, MdPassword, MdPerson, MdPhone } from 'react-icons/md'
import { motion } from 'framer-motion'
import swal from 'sweetalert'
import { cpfMask, phoneMask } from '../../masks'
import Head from 'next/head'

const schema = yup.object().shape({
  email: yup.string().email('Email inválido').required('Email obrigatório'),
  name: yup.string().required('Nome obrigatório'),
  cpf: yup
    .string()
    .required('CPF obrigatório')
    .matches(/[0-9]{3}\.?[0-9]{3}\.?[0-9]{3}-?[0-9]{2}/, 'Cpf inválido'),
  phone: yup
    .string()
    .required('Celular obrigatório')
    .matches(/^\([1-9]{2}\) (?:[2-8]|9[1-9])[0-9]{3}-[0-9]{4}$/, 'Telefone inválido'),
  currentPassword: yup.string(),
  password: yup
    .string(),
})

export default function Profile(): JSX.Element {
  const [user, setUser] = useState<any>()
  const [loading, setLoading] = useState<boolean>(true)
  const router = useRouter()
  const {
    register,
    setValue,
    getValues,
    reset,
    handleSubmit,
    formState: { errors },
  } = useForm({ resolver: yupResolver(schema) })

  const onSubmit = (): Promise<void> => {
    return api.put(`/users/${user.id}`, getValues()).then((res: AxiosResponse) => {
      setUser(res.data)
      swal({
        title: 'Perfil atualizado com sucesso!',
        icon: 'success',
      })
    }).catch(() => {
      swal({
        title: 'Senha atual errada.',
        icon: 'error',
      })
    })
  }

  useEffect(() => {
    api.get('/users/me').then((res: AxiosResponse) => {
      setUser(res.data)
      reset({
        name: res.data.name,
        email: res.data.email,
        cpf: res.data.cpf,
        phone: res.data.phone,
      })
      setLoading(false)
    }).catch(() => {
      router.replace('/')
    })
  }, [reset, router])

  if (loading) return <div></div>

  return (
    <>
      <Head>
        <title>Cartão Vai Bem - Perfil</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="min-h-screen bg-gray-50"
      >
        <div className="px-4 py-16 mx-auto lg:w-[1000px]">
          <div className="flex flex-col gap-y-3">
            <h1 className="text-5xl">
              Olá, <span className="text-primary">{user?.name}</span>
            </h1>
            <div>
              <button className="text-red-400" onClick={() => {
                localStorage.removeItem('token')
                router.replace('/')
              }}>Sair</button>
            </div>
          </div>
          <div className="shadow-lg bg-white rounded-lg mt-4 mx-auto px-8 py-6 lg:w-[30rem]">
            <h3 className="text-4xl mb-10">Editar</h3>
            <form 
              className="w-full flex flex-col gap-y-4"
              onSubmit={handleSubmit(onSubmit)}
            >
              <div className="flex flex-col gap-y-12 items-center gap-x-4 sm:flex-row">
                <Input
                  label="Email"
                  icon={<MdEmail className="text-2xl text-gray-700" />}
                  register={register('email')}
                  error={errors.email}
                />
                <Input
                  label="Nome Completo"
                  icon={<MdPerson className="text-2xl text-gray-700" />}
                  register={register('name')}
                  error={errors.name}
                />
              </div>
              <div className="flex flex-col gap-y-8 items-center gap-x-4 sm:flex-row">
                <Input
                  label="Celular"
                  icon={<MdPhone className="text-2xl text-gray-700" />}
                  register={{...register('phone'), maxLength: 15, onChange: (e: React.ChangeEvent<HTMLInputElement>) => setValue('phone', phoneMask(e.currentTarget.value), { shouldValidate: true })}}
                  error={errors.phone}
                />
                <Input
                  label="CPF"
                  icon={<MdOutlineFileCopy className="text-2xl text-gray-700" />}
                  register={{...register('cpf'), onChange: (e: React.ChangeEvent<HTMLInputElement>) => setValue('cpf', cpfMask(e.currentTarget.value), { shouldValidate: true })}}
                  error={errors.cpf}
                />
              </div>
              <div className="flex flex-col gap-y-8 items-center gap-x-4 sm:flex-row">
                <Input
                  type="password"
                  label="Senha Atual"
                  icon={<MdPassword className="text-2xl text-gray-700" />}
                  register={register('currentPassword')}
                  error={errors.currentPassword}
                />
                <Input
                  type="password"
                  label="Nova Senha"
                  icon={<MdPassword className="text-2xl text-gray-700" />}
                  register={register('password')}
                  error={errors.password}
                />
              </div>
              <div className="flex justify-end">
                <button className="bg-primary text-white px-10 py-2 rounded-full">
                  Editar
                </button>
              </div>
            </form>
          </div>
        </div>
      </motion.div>
    </>
  )
}